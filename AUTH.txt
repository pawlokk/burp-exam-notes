

    With Burp running, log in to your own account and investigate the 2FA verification process. Notice that in the POST /login2 request, the verify parameter is used to determine which user's account is being accessed.
    Log out of your account.
    Send the GET /login2 request to Burp Repeater. Change the value of the verify parameter to carlos and send the request. This ensures that a temporary 2FA code is generated for Carlos.
    Go to the login page and enter your username and password. Then, submit an invalid 2FA code.
    Send the POST /login2 request to Burp Intruder.
    In Burp Intruder, set the verify parameter to carlos and add a payload position to the mfa-code parameter. Brute-force the verification code.
    Load the 302 response in the browser.
    Click My account to solve the lab.




FUCK
when theres no functionalities
and you come to bruteforcing usernames and passwords, try different tricks first, like 
trying the username list with null payloads - adding §§ to the end of password parameter - and then choosing Null payloads from the dropdown list in the Payloads tab, 5 should be sufficient 
this runs through fast (or numbers 1-5), and you can identify usernames that behave differently, like time differences, resp lenght difference, or grep the Invalid username comm.

for bypassing throttling, waiting a minute can help, or add headers like
X-Forwarded-For
X-Forwarded-Host